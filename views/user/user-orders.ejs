<%-include("../../views/partials/user/header",{user:firstName}) %>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  

<body>
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/userProfile">Profile</a></li>
      <li class="breadcrumb-item active" aria-current="page">Orders</li>
    </ol>
  </nav>
  <div class="container" style="display: flex; justify-content: space-around; margin: 20px;">
    <div class="sidebar" style="width: 25%; margin-right: 20px;">
      <h3>My Profile</h3>
      <div class="profile-user">
        <!-- <div class="user">
          <img src="https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=" alt="Profile Picture" style="width: 100px; height: 100px; border-radius: 50%; object-fit: cover;"> -->
          <div class="user">
            <img src="<%= user.picture ? user.picture : 'https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=' %>" 
                 alt="Profile Picture" 
                 style="width: 100px; height: 100px; border-radius: 50%; object-fit: cover;" 
                 onerror="this.src='https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o='">
          
          
          
          
          <div class="name" style="color: #000000;margin-left: 2rem; font-weight: 500; text-transform: uppercase;"><%= firstName %></div>
        </div>
      </div>
      <ul>
        <li><a href="/userProfile"><i class="fas fa-user"></i> Edit Profile</a></li>
        <li><a href="/profile/wallet"><i class="fas fa-wallet"></i> Your Wallet</a></li>
        <li><a href="/profile/orders"><i class="fas fa-shopping-cart"></i> Your Orders</a></li>
       
        <li><a href="/wishlist"><i class="fas fa-heart"></i> Wishlist</a></li>
        <li><a href="/profile/address"><i class="fas fa-address-card"></i> Addresses</a></li>
        
        
        <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
      </ul>
    </div>
    
    
    <div class="orders" style="width: 70%;">
        <h2>My Orders</h2>
      
        <% for (let i = orders.length - 1; i >= 0; i--) {
          const order = orders[i]; %>
      
          <!-- Loop through orderedItems and create a separate order tile for each item -->
          <% order.orderedItems.forEach(item => { %>
          <div class="order-container" style="margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 5px;">
            <div class="order-header">
              <div class="order-title">Order ID: <span style="margin-left: 5px;"></span> <%= order.orderId %></div>
              <div class="order-status">Order Status: <span style="margin-left: 5px;"></span><%= item.itemStatus || order.orderStatus %></div>
            </div>
      
            <div class="ordered-item" style="display: flex; align-items: center; margin-top: 20px;">
              <div>
                <% if (item.product && item.product.productImage) { %>
                  <img src="/uploads/re-image/<%= item.product.productImage[0] %>" 
                       alt="<%= item.product.productName %>" 
                       style="width: 100px; height: auto;">
                <% } else { %>
                  <img src="/path/to/placeholder-image.jpg" alt="No Image" style="width: 100px; height: auto;">
                <% } %>
              </div>
              <div style="margin-left: 20px;">
                <p>Item OrderID:<span style="margin-left: 5px;"></span> <%= item.itemOrderId %></p>
                <p>Product Name: <span style="margin-left: 5px;"></span><%= item.product.productName %></p>
                <p>Size: <span style="margin-left: 5px;"></span><%= item.size %></p>
                <p>Quantity: <span style="margin-left: 5px;"></span><%= item.quantity %></p>
                <p>Color:<span style="margin-left: 5px;"></span> <%= item.product.color %></p>
      
                

                <div class="item-actions">
                  <% if ((item.itemStatus || order.orderStatus) === 'Delivered' && (item.itemPaymentStatus || order.paymentStatus) === 'Completed') { %>
                      <div class="return-reason" style="margin-bottom: 10px;">
                          <textarea class="form-control return-reason-input" rows="2" placeholder="Enter return reason..."></textarea>
                      </div>
                      <button class="btn btn-danger return-btn" data-id="<%= item._id %>" style="width: 100px;">
                          Return
                      </button>
                  <% } else if ((item.itemStatus || order.orderStatus) === 'Cancelled' || 
                                (item.itemStatus || order.orderStatus) === 'Shipped' || 
                                (item.itemStatus || order.orderStatus) === 'Returned') { %>
                      <!-- <button class="btn btn-secondary" disabled style="width: 110px;">
                          Cancelled
                      </button> -->
                  <% } else { %>
                      <div class="cancel-reason" style="margin-bottom: 10px;">
                          <textarea class="form-control cancel-reason-input" rows="2" placeholder="Enter cancel reason..."></textarea>
                      </div>
                      <button class="btn btn-danger cancel-btn" data-id="<%= item._id %>" style="width: 100px;">
                          Cancel
                      </button>
                  <% } %>
              </div>
              
              
              </div>
            </div>
      
            <!-- Order Details and Actions for Each Item -->
            <div class="order-details" style="margin-top: 20px;">
              <p>Payment Method: <span style="margin-left: 5px;"></span><%= order.paymentMethod %></p>
              <p>Total Price: â‚¹<span style="margin-left: 5px;"></span><%= order.couponApplied===true?(item.price*item.quantity)-((item.price*item.quantity)*order.couponPercentage)/100:(item.price*item.quantity) %></p> <!-- Adjust price if needed per item -->
            </div>
      
            <div class="order-actions" style="margin-top: 10px;">
              <% if ((item.itemStatus||order.orderStatus) === 'Delivered' && (item.itemPaymentStatus||order.paymentStatus) === 'Completed') { %>
                <button class="btn btn-warning invoice-btn" data-id="<%=  item.itemOrderId %>" style="width: 130px;">
                  <a href="/invoice/<%= item.itemOrderId %>">Invoice</a>
                </button>
              <% } %>
              <% if ((item.itemStatus||order.orderStatus) === 'Pending' && (item.itemPaymentStatus||order.paymentStatus) === 'Failed') { %>
                <button class="btn btn-warning retry-btn" data-id="<%= order._id %>" style="width: 130px;">
                  Retry Payment
                </button>
              <% } %>
            </div>
          </div>
          <% }) %>
        <% } %>
      </div>
      

    
    
    </div>
    </body>
<%-include("../../views/partials/user/footer") %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<!-- Include Razorpay's Checkout script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
   document.querySelectorAll('.cancel-btn').forEach(button => {
        button.addEventListener('click', function() {
          const reason = this.previousElementSibling.querySelector('.cancel-reason-input').value;
            const orderId = this.getAttribute('data-id');
            console.log(orderId)

            if (reason.trim() === '') {
                Swal.fire('Please enter a reason for cancellation.'); // Sweet Alert
                return;
            }


            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Make a request to cancel the order
                    fetch(`/profile/cancelOrder/${orderId}`, {
                        method: 'POST', // Or 'GET' if you're using GET to cancel
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ reason }),
                    }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire(
                                'Cancelled!',
                                data.message ||'The order has been cancelled.',
                                'success'
                            ).then(() => {
                                location.reload(); // Reload the page to reflect changes
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                data.message ||'Unable to cancel the order. Please try again.',
                                'error'
                            );
                        }
                    }).catch(err => {
                        Swal.fire(
                            'Error!',
                            'Something went wrong. Please try again.',
                            'error'
                        );
                    });
                }
            });
        });
    });





    document.querySelectorAll('.return-btn').forEach(button => {
    button.addEventListener('click', function() {
        const orderId = this.getAttribute('data-id');
        const reason = this.previousElementSibling.querySelector('.return-reason-input').value;
        console.log(orderId)

        if (reason.trim() === '') {
                Swal.fire('Please enter a reason for return.'); // Sweet Alert
                return;
            }

        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, return it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Make a request to return the order
                fetch(`/profile/returnOrder/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason }),
                }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire(
                            'Returned!',
                            'The order return request successful.',
                            'success'
                        ).then(() => {
                            location.reload(); // Reload the page to reflect changes
                        });
                    } else {
                        Swal.fire(
                            'Error!',
                            data.message,
                            'error'
                        );
                    }
                }).catch(err => {
                    Swal.fire(
                        'Error!',
                        'Something went wrong. Please try again.',
                        'error'
                    );
                });
            }
        });
    });
});

 // Wait for the DOM to load
 document.addEventListener('DOMContentLoaded', () => {
        // Select all buttons with the class 'return-btn'
        const retryPaymentButtons = document.querySelectorAll('.retry-btn');

        // Add click event listeners to all buttons
        retryPaymentButtons.forEach(button => {
            button.addEventListener('click', async function() {
                const orderId = this.getAttribute('data-id'); // Get the order ID from the button's data-id attribute
                console.log('Retrying payment for order:', orderId);

                try {
                    // Make a POST request to retry the payment
                    const response = await fetch(`/retryPayment/${orderId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                    });

                    const result = await response.json();
                    console.log(result);

                
                if (response.ok) {
    // If the response is OK and payment method is 'Card Payment', initiate Razorpay
    initiateRazorpayPayment(result);
} else {
    // Show error message if payment fails
    Swal.fire({
        icon: 'error',
        title: 'Payment Failed',
        text: result.message || 'Error retrying payment order',
        confirmButtonText: 'OK'
    });
}

} catch (error) {
    console.error('Error retrying payment:', error);
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Error retrying payment.',
        confirmButtonText: 'OK'
    });
}

            });
        });
    });



// Function to initiate Razorpay payment
function initiateRazorpayPayment(orderDetails) {
    const options = {
        key: orderDetails.key, // Razorpay API Key
        amount: orderDetails.amount, // Amount in paise
        currency: orderDetails.currency,
        name: orderDetails.name, // Your store name
        description: orderDetails.description, // Payment description
        order_id: orderDetails.orderId, // The Razorpay order_id
        handler: function (response) {
            // Handle payment success - send payment details to the backend for verification
            verifyPayment(response);
        },
        prefill: {
            name: orderDetails.prefill.name,
            email: orderDetails.prefill.email,
            contact: orderDetails.prefill.contact
        },
        theme: {
            color: "#3399cc" // Customize the checkout modal's color
        }
    };

    const rzp = new Razorpay(options);
    rzp.open(); // Opens Razorpay Checkout modal
}

// Function to verify the payment on the backend
function verifyPayment(paymentResponse) {
    fetch('/verify-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            razorpay_order_id: paymentResponse.razorpay_order_id,
            razorpay_payment_id: paymentResponse.razorpay_payment_id,
            razorpay_signature: paymentResponse.razorpay_signature
        })
    })
    .then(response => response.json())
    .then(data => {

      if (data.success) {
    // Payment successful
    Swal.fire({
        icon: 'success',
        title: 'Payment Successful!',
        text: 'Redirecting to order completion page...',
        showConfirmButton: false,
        timer: 3000, // Automatically close after 3 seconds
    }).then(() => {
        window.location.href = `/order-complete/${paymentResponse.razorpay_order_id}`; // Redirect to order completion page
    });
} else {
    // Payment verification failed
    Swal.fire({
        icon: 'error',
        title: 'Payment Failed',
        text: 'Payment verification failed. Please try again.',
        confirmButtonText: 'OK'
    });
}
})
.catch(error => {
    console.error('Error verifying payment:', error);
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'There was an error processing your payment.',
        confirmButtonText: 'OK'
    });
});

    
}





</script>

<style>
  .sidebar {
    background-color: #fff;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .sidebar h3 {
    margin-top: 0;
  }

  .sidebar ul {
    list-style: none;
    padding: 0;
  }

  .sidebar li {
    margin-bottom: 10px;
  }

  .sidebar a {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: #333;
    padding: 10px;
    border-radius: 5px;
    transition: background-color 0.3s ease;
  }

  .sidebar a:hover {
    background-color: #f0f0f0;
  }

  .sidebar i {
    margin-right: 10px;
    font-size: 18px;
  }

  .profile-user {
    padding: 20px;
    width: fit-content;
    border-radius: 5px;
  }

  .profile h2 {
    margin-top: 0;
  }

  .profile .user {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
  }

  .profile .user img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 10px;
  }

  .profile .user .name {
    font-size: 18px;
    font-weight: bold;
  }

  .profile .field {
    margin-bottom: 15px;
  }

  .profile .field label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }

  .profile .field input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
  }

  .profile .buttons {
    display: flex;
    justify-content: flex-end;
    margin-top: 20px;
  }

  .profile .buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .profile .buttons button:hover {
    opacity: 0.8;
  }

  .profile .buttons button.cancel {
    background-color: #ccc;
    color: #333;
  }

  .profile .buttons button.save {
    background-color: #f44336;
    color: #fff;
  }

  .orders {
    margin-left: 20px;
  }

  .order-container {
    border: 1px solid #ccc;
    margin-bottom: 20px;
    padding: 20px;
    border-radius: 5px;
  }

  .order-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }

  .order-title {
    font-weight: bold;
  }

  .order-status {
    color: #28a745;
    font-weight: 600;
  }

  .order-details {
    margin-bottom: 10px;
  }

  .order-actions {
    text-align: right;
  }

  .order-actions button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
  }
  p{
    margin-bottom: 0rem;
    font-weight: 500;
  }





  
</style>